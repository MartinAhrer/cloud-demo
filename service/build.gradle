buildscript {
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.2.RELEASE")
        classpath 'com.bmuschko:gradle-docker-plugin:2.6.5'
    }
}

plugins {
    id 'java'
    id 'groovy'
}

ext {
    spockVersion = '1.0-groovy-2.4'
    groovyVersion = '2.4.5'
}

apply plugin: 'spring-boot'

dependencyManagement {
    imports {
        //mavenBom 'io.spring.platform:platform-bom:2.0.2.RELEASE'
        mavenBom 'org.springframework.cloud:spring-cloud-starter-parent:Angel.SR6'
    }
}

jar {
    baseName = 'service'
    version =  project.version
}

bootRepackage {
    classifier = 'exec'
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web"
    compile 'org.springframework.cloud:spring-cloud-starter-config'
    compile "org.slf4j:slf4j-api"
    compile "org.projectlombok:lombok:1.16.6"

    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "org.apache.httpcomponents:httpclient:4.5.1"
    testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"
    testCompile "org.spockframework:spock-core:$spockVersion"
    testCompile "org.spockframework:spock-spring:$spockVersion"
}


apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import org.apache.tools.ant.filters.ReplaceTokens

docker {
    def env = System.getenv()
    def dockerHost = env['DOCKER_HOST']
    if (dockerHost != null) {
        url = dockerHost.replace('tcp://', 'https://')
        certPath = new File(env['DOCKER_CERT_PATH'])
    }
    //TODO setup registry
}

task buildDockerContext(type: Copy) {
    group = "Docker"
    description = "Prepare for building the image (create the Dockerfile, collect image files, etc.)"

    destinationDir = file("$buildDir/docker")

    from("$projectDir/src/main/docker") {
        filter(ReplaceTokens, tokens: [version: project.version as String])
    }

    from(bootRepackage) {
    }
}

task buildImage(type: DockerBuildImage) {
    group = "Docker"
    description = "Build the image"

    dependsOn buildDockerContext

    inputDir = buildDockerContext.destinationDir
    //TODO tag to registry
    tag = "martinahrer/${project.name}:${project.version}"
}
